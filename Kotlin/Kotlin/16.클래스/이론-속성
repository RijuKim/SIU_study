속성(Property)

1. getter/setter
-getter: 클래스의 속성에 접근할 때
-setter: 클래스의 속성의 값을 설정할 때
-기본적으로 코틀린이 제공을 해주지만, 특별한 기능을 추가하고 싶을 경우에는 개발자가 직접 작성할 수 있다
class User7 {
    var age: Int
        get() {
            본문
        }
        set(value: Int){
            본문
        }
    val name: String

    constructor(age: Int, name: String) {
        this.age = age
        this.name = name
    }
}
-> 속성 : age, name
val user = User7(20, "이름")
-> println(user.age) -> 20 출력 -> 코틀린이 getter를 호출
user.age = 30 -> 30으로 할당 -> 코틀린이 setter를 호출 해준다
user7.age = 60 -> 불가능


2. lateinit
-var로
class User7 {
    lateinit var age: Int
    latinit var name: String
}
-var로 선언한 속성에만 적용가능
-주 생성자에서는 사용할 수 없다
-getter/setter 적용 불가능
-nullable에는 적용 불가
-기초타입 속성에는 적용 불가
    -원시 자료형(primitive type)
    -String 을 제외한 흔히 알고 있는 자료형
-isInitalized로 초기화 여부 확인

더블콜론 (::)
-Reflaction 기능
-런타임에 프로그램의 구조를 조사할 수 있는 기능
-lateinit의 초기화 여부는 런타임이 아니면 알 수 없다
예시) if (현재 시간의 초가 홀수이면 10으로 하고, 아니면 초기화를 안 한다)

lazy (지연 초기화)
-초기화를 미루고 미뤄서 정말 필요한(접근할 때) 순간에 초기화 하겠다
-lazy로 선언된 변수는 선언이 될 때, 혹은 init 블록에서가 아니라 실제로 접글할 때 초기화가 이루어진다
class Computer{
    val ram : Ram =
}