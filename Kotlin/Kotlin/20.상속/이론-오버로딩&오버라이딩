오버로딩, 오버라이딩

오버라이딩(Overriding)
-슈퍼클래스가 사용 중인 멤버와 동일한 이름의 멤버 만들기 불가
    -오버라이딩을 통해 슈퍼클래스가 가지고 있는 함수 재정의 가능
    -재정의를 할 때는 함수 맨 앞에 override 키워드를 적어 준다
-재정의
    -재선언과 동일
    -이전에 정의한 것을 번복하고 새롭게 정의하겠다
        -번복 -> 이전에 정의한 것은 작동하지 않는다
        -> 이전 것을 덮어씀

open class Warrior(var name: String, var power: Int, var type: String){
    fun attack(){
        println("파이어")
    }
}

class DefenseWarrior1 constructor(name: String, power: Int) : Warrior1(name, power, "골렘") {
    fun defense() {
        println("방어")
    }
    fun attack(){
        //슈퍼클래스와 동일한 이름을 가지고 있는 함수는 만들 수 없음 -> 오버라이딩 해야함
    }
    override fun attack(){
       //오버라이딩
       println("썬더")
    }
}

오버로딩(Overloading)
-동일한 함수를 복수 개 만드는 것은 불가능
    -> 코틀린이 복수 개 있는 경우 사용자가 어떤 것을 원하는 지 알 수 없기 때문
fun sum(a : Int, b: Int):Int {return a+b}
fun sum(a : Int, b: Int):Int {return a+b}

sum(1, 2)
-어떤 함수를 사용자가 원하는 지 알 수 있다면 동일한 이름의 함수 복수개 생성 가능
    -함수가 받는 인자가 다른 경우
        fun sum(a : Int, b: Int):Int {return a+b}
        fun sum(a : Int):Int {return a+10}

        sum(10, 20)
        sum(10)
    -함수가 리턴하는 타입이 다른 경우 -> 오버로딩이 불가
        fun sum(a : Int, b: Int):Int {return a+b}
        fun sum(a : Int, b: Int):String {return a+b}

        val a: Int = sum(10, 10)
        val b : String = sum(20, 20)